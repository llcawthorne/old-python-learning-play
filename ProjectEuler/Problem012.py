#!/usr/bin/env python3
"""Project Euler Problem 012

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred 
divisors?
"""

# Let's make a list of the first 20000 triangle numbers
ranges = [range(1,x) for x in range(2,20000)]
triangles = [sum(r) for r in ranges]

numInterest = 0
for tri in triangles:
    divisors = [1]
    for x in range(tri,1,-1):
        if tri % x == 0: 
            divisors.append(x)
        if len(divisors) > 500: 
            numInterest = tri
            break

print("The number is",numInterest)
