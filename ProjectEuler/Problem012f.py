#!/usr/bin/env python3
"""Project Euler Problem 012

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred 
divisors?
"""

# Function to compute divisors
def divisors(x):
    divisors=[x]
    for i in range((x//2),0,-1):
        if x % i == 0:
            divisors.append(i)
    return divisors

# Let's make a generator of the first 2000000 triangle numbers
ranges = (range(1,x) for x in range(2,2000000))
triangles = (sum(r) for r in ranges)

for tri in triangles:
    if(len(divisors(tri)) > 500):
        numInterest = tri
        break

try:
    print("The number is",numInterest)
except:
    print("No number found.")
